"""
# 이중 우선순위 큐

## 문제 설명

이중 우선순위 큐는 다음 연산을 할 수 있는 자료구조입니다:

| 명령어 | 설명 |
|--------|------|
| `I 숫자` | 큐에 주어진 숫자를 삽입합니다 |
| `D 1` | 큐에서 최댓값을 삭제합니다 |
| `D -1` | 큐에서 최솟값을 삭제합니다 |

이중 우선순위 큐가 할 연산 `operations`가 매개변수로 주어질 때, 모든 연산을 처리한 후:
- 큐가 비어있으면 `[0, 0]`
- 비어있지 않으면 `[최댓값, 최솟값]`

을 return 하도록 solution 함수를 구현해주세요.

## 제한사항

- `operations`는 길이가 1 이상 1,000,000 이하인 문자열 배열입니다
- `operations`의 원소는 큐가 수행할 연산을 나타냅니다
- 원소는 "명령어 데이터" 형식으로 주어집니다
- 최댓값/최솟값을 삭제하는 연산에서 최댓값/최솟값이 둘 이상인 경우, 하나만 삭제합니다
- 빈 큐에 데이터를 삭제하라는 연산이 주어질 경우, 해당 연산은 무시합니다

## 입출력 예

| operations | return |
|------------|--------|
| `["I 16", "I -5643", "D -1", "D 1", "D 1", "I 123", "D -1"]` | `[0,0]` |
| `["I -45", "I 653", "D 1", "I -642", "I 45", "I 97", "D 1", "D -1", "I 333"]` | `[333, -45]` |

## 입출력 예 설명

### 예제 #1
1. 16과 -5643을 삽입합니다
2. 최솟값을 삭제합니다. -5643이 삭제되고 16이 남아있습니다
3. 최댓값을 삭제합니다. 16이 삭제되고 이중 우선순위 큐는 비어있습니다
4. 우선순위 큐가 비어있으므로 최댓값 삭제 연산이 무시됩니다
5. 123을 삽입합니다
6. 최솟값을 삭제합니다. 123이 삭제되고 이중 우선순위 큐는 비어있습니다

따라서 `[0, 0]`을 반환합니다.

### 예제 #2
1. -45와 653을 삽입후 최댓값(653)을 삭제합니다. -45가 남아있습니다
2. -642, 45, 97을 삽입 후 최댓값(97), 최솟값(-642)을 삭제합니다. -45와 45가 남아있습니다
3. 333을 삽입합니다

이중 우선순위 큐에 -45, 45, 333이 남아있으므로, `[333, -45]`를 반환합니다.

## 테스트 케이스

```javascript
// 기본 테스트 케이스
console.log(solution(["I 16", "I -5643", "D -1", "D 1", "D 1", "I 123", "D -1"])); 
// 예상 결과: [0, 0]

console.log(solution(["I -45", "I 653", "D 1", "I -642", "I 45", "I 97", "D 1", "D -1", "I 333"])); 
// 예상 결과: [333, -45]

// 추가 테스트 케이스
console.log(solution(["I 1", "I 2", "I 3"])); 
// 예상 결과: [3, 1]

console.log(solution(["D 1", "D -1", "I 1"])); 
// 예상 결과: [1, 1]

console.log(solution(["I 5", "I 5", "D 1", "D -1"])); 
// 예상 결과: [0, 0]
```

## 힌트

### 접근 방법
1. **배열 + 정렬**: 가장 단순한 방법으로 배열에 원소를 저장하고 매번 정렬
2. **두 개의 힙 사용**: 최대 힙과 최소 힙을 동시에 사용하여 효율성 향상
3. **균형 이진 탐색 트리**: 삽입, 삭제, 최댓값/최솟값 조회가 모두 O(log n)

### 구현 팁
- JavaScript에서는 내장 힙이 없으므로 배열과 정렬을 사용하는 것이 구현이 간단합니다
- 문자열 파싱: `operation.split(' ')`로 명령어와 데이터를 분리
- 빈 큐 체크: 삭제 연산 전에 배열이 비어있는지 확인
- 결과 반환: 큐가 비어있으면 `[0, 0]`, 아니면 `[Math.max(...queue), Math.min(...queue)]`

### 시간 복잡도 고려사항
- operations 길이가 최대 1,000,000이므로 효율적인 알고리즘이 필요할 수 있습니다
- 배열 + 정렬 방식: O(n²log n) - 각 연산마다 정렬
- 최적화된 방식: O(n log n) - 힙이나 균형 트리 사용
"""



"""
case
"""

# task case
test_cases = [
    # (입력, 예상 결과, 설명)
    (["I 16", "I -5643", "D -1", "D 1", "D 1", "I 123", "D -1"], [0, 0], "기본 예제 1: 모든 원소가 삭제되어 빈 큐"),
    (["I -45", "I 653", "D 1", "I -642", "I 45", "I 97", "D 1", "D -1", "I 333"], [333, -45], "기본 예제 2: 최종적으로 333, 45, -45가 남음"),
    (["I 1", "I 2", "I 3"], [3, 1], "삽입만 있는 경우"),
    (["D 1", "D -1", "I 1"], [1, 1], "빈 큐에서 삭제 시도 후 삽입"),
    (["I 5", "I 5", "D 1", "D -1"], [0, 0], "같은 값 두 개 삽입 후 모두 삭제"),
    (["I 1"], [1, 1], "원소 하나만 있는 경우"),
    ([], [0, 0], "빈 operations 배열"),
    (["I 100", "I 200", "I 300", "D 1", "D 1", "D 1"], [0, 0], "모든 최댓값 삭제"),
    (["I -100", "I -200", "I -300", "D -1", "D -1", "D -1"], [0, 0], "모든 최솟값 삭제"),
    (["I 0", "I 0", "I 0", "D 1", "D -1"], [0, 0], "0이 여러 개인 경우")
]


def run_tests():
    print("테스트 실행 중...\n")
    passed = 0
    failed = 0
    
    for i, (input_str, expected, description) in enumerate(test_cases, 1):
        try:
            result = solution(input_str)
            status = "PASS" if result == expected else "FAIL"
            
            if result == expected:
                passed += 1
                print(f"테스트 {i:2d}: {status} - {description}")
            else:
                failed += 1
                print(f"테스트 {i:2d}: {status} - {description}")
                print(f"         입력: '{input_str}'")
                print(f"         예상: {expected}, 실제: {result}")
                
        except Exception as e:
            failed += 1
            print(f"테스트 {i:2d}: ERROR - {description}")
            print(f"         입력: '{input_str}'")
            print(f"         오류: {e}")
    
    print(f"\n결과: {passed}개 통과, {failed}개 실패")
    return failed == 0


if __name__ == "__main__":
    run_tests()